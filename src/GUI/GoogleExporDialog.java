/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GoogleExporDialog.java
 *
 * Created on 20.1.2010, 16:54:06
 */
package GUI;

import api.ItemsManager;
import com.google.gdata.util.AuthenticationException;
import com.google.gdata.util.ServiceException;
import hibernate.DatabaseManager;
import java.awt.Color;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JFrame;

/**
 *
 * @author Lada Riha
 */
public class GoogleExporDialog extends javax.swing.JDialog {

    /** Creates new form GoogleExporDialog
     * @param parent
     * @param modal
     */
    public GoogleExporDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     *
     * @param jFrame
     * @param modal
     * @param userID
     * @param aThis
     */
    public GoogleExporDialog(java.awt.Frame jFrame, boolean modal, int userID, MainWindow aThis) {
        super(jFrame, modal);
        this.idU = userID;
        mw = aThis;
        initComponents();
        generateLabels();
    }
        /**
     * Generates all labels used in user's contacts a for each of them creates checkbox
     */
    private void generateLabels() {
        try {
            String stitky = DatabaseManager.getUserLabels(idU);
            String[] labels = stitky.split(",");
            JCheckBox box;
            String tmp;
            for (int i = 0; i < labels.length; i++) {
                tmp = labels[i];
                if (labels[i].equals("organizer")) {
                    labels[i] = "Contacts without labels";
                }
                box = new JCheckBox(labels[i]);
                box.setName(tmp);
                box.setBackground(new Color(255, 255, 255));
                box.addActionListener(new java.awt.event.ActionListener() {

                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        labelSelectionAction(evt);
                    }
                });
                jPanel7.add(box);
            }
        } catch (Exception ex) {
            javax.swing.JLabel label = new javax.swing.JLabel("Cannot get a list of labels ");
            label.setBackground(new Color(255, 255, 255));
            jPanel7.add(label);
        }

    }
    /**
     * Adds or removes selected label from list of labels to be exported
     * @param evt
     */
    private void labelSelectionAction(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
       if (box.isSelected()) {
            if(box.getText().equalsIgnoreCase("Contacts without labels")){
            labelsToExport.add("organizer");
            }else{
            labelsToExport.add(box.getText());}
        } else {
            if(box.getText().equalsIgnoreCase("Contacts without labels")){
            labelsToExport.remove("organizer");
            }else{
            labelsToExport.remove(box.getText());}
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jCheckBox27 = new javax.swing.JCheckBox();
        jCheckBox28 = new javax.swing.JCheckBox();
        jCheckBox29 = new javax.swing.JCheckBox();
        jCheckBox34 = new javax.swing.JCheckBox();
        jCheckBox35 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gmail export");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Export contacts to Gmail");

        jLabel2.setText("Gmail email address:");

        jLabel3.setText("Password:");

        jPasswordField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exported contacts:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jTextField2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Export to contact group \"Organizer\"");

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButton2.setText("Different name of contact group:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRadioButton1))
                .addContainerGap(48, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jButton3.setText("Exportovat");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(464, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(210, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Export all", jPanel4);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new java.awt.GridLayout(6, 3));
        jScrollPane1.setViewportView(jPanel7);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
        );

        jButton1.setText("Export selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Export by labels", jPanel3);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setText("A");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1letterSelectionAction(evt);
            }
        });

        jCheckBox2.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setText("B");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2letterSelectionAction(evt);
            }
        });

        jCheckBox3.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox3.setText("C");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3letterSelectionAction(evt);
            }
        });

        jCheckBox4.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox4.setText("D");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4letterSelectionAction(evt);
            }
        });

        jCheckBox5.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox5.setText("E");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5letterSelectionAction(evt);
            }
        });

        jCheckBox7.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox7.setText("F");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7letterSelectionAction(evt);
            }
        });

        jCheckBox8.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox8.setText("G");
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8letterSelectionAction(evt);
            }
        });

        jCheckBox9.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox9.setText("H");
        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox9letterSelectionAction(evt);
            }
        });

        jCheckBox10.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox10.setText("I");
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10letterSelectionAction(evt);
            }
        });

        jCheckBox11.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox11.setText("J");
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11letterSelectionAction(evt);
            }
        });

        jCheckBox13.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox13.setText("K");
        jCheckBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox13letterSelectionAction(evt);
            }
        });

        jCheckBox14.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox14.setText("L");
        jCheckBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox14letterSelectionAction(evt);
            }
        });

        jCheckBox15.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox15.setText("M");
        jCheckBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox15letterSelectionAction(evt);
            }
        });

        jCheckBox16.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox16.setText("N");
        jCheckBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox16letterSelectionAction(evt);
            }
        });

        jCheckBox17.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox17.setText("O");
        jCheckBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox17letterSelectionAction(evt);
            }
        });

        jCheckBox19.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox19.setText("P");
        jCheckBox19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox19letterSelectionAction(evt);
            }
        });

        jCheckBox20.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox20.setText("Q");
        jCheckBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox20letterSelectionAction(evt);
            }
        });

        jCheckBox21.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox21.setText("R");
        jCheckBox21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox21letterSelectionAction(evt);
            }
        });

        jCheckBox22.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox22.setText("S");
        jCheckBox22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox22letterSelectionAction(evt);
            }
        });

        jCheckBox23.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox23.setText("T");
        jCheckBox23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox23letterSelectionAction(evt);
            }
        });

        jCheckBox25.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox25.setText("U");
        jCheckBox25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox25letterSelectionAction(evt);
            }
        });

        jCheckBox26.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox26.setText("V");
        jCheckBox26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox26letterSelectionAction(evt);
            }
        });

        jCheckBox27.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox27.setText("W");
        jCheckBox27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox27letterSelectionAction(evt);
            }
        });

        jCheckBox28.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox28.setText("X");
        jCheckBox28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox28letterSelectionAction(evt);
            }
        });

        jCheckBox29.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox29.setText("Y");
        jCheckBox29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox29letterSelectionAction(evt);
            }
        });

        jCheckBox34.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox34.setText("#");
        jCheckBox34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox34letterSelectionAction(evt);
            }
        });

        jCheckBox35.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox35.setText("Z");
        jCheckBox35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox35letterSelectionAction(evt);
            }
        });

        jButton2.setText("Export selected");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15)
                    .addComponent(jCheckBox16)
                    .addComponent(jCheckBox17))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20)
                    .addComponent(jCheckBox21)
                    .addComponent(jCheckBox22)
                    .addComponent(jCheckBox23))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox25)
                    .addComponent(jCheckBox26)
                    .addComponent(jCheckBox27)
                    .addComponent(jCheckBox28)
                    .addComponent(jCheckBox29))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox35)
                    .addComponent(jCheckBox34))
                .addContainerGap(243, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(444, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox34))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox29))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox23))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox17))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox11))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Export by letters", jPanel5);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gmail.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPasswordField1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

         /**
     * Adds or removes selected letter from list of letters to be exported
     * @param evt
     */
    private void jCheckBox1letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox1letterSelectionAction

    private void jCheckBox2letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox2letterSelectionAction

    private void jCheckBox3letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox3letterSelectionAction

    private void jCheckBox4letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox4letterSelectionAction

    private void jCheckBox5letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox5letterSelectionAction

    private void jCheckBox7letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox7letterSelectionAction

    private void jCheckBox8letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox8letterSelectionAction

    private void jCheckBox9letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox9letterSelectionAction

    private void jCheckBox10letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox10letterSelectionAction

    private void jCheckBox11letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox11letterSelectionAction

    private void jCheckBox13letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox13letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox13letterSelectionAction

    private void jCheckBox14letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox14letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox14letterSelectionAction

    private void jCheckBox15letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox15letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox15letterSelectionAction

    private void jCheckBox16letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox16letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox16letterSelectionAction

    private void jCheckBox17letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox17letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox17letterSelectionAction

    private void jCheckBox19letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox19letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox19letterSelectionAction

    private void jCheckBox20letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox20letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox20letterSelectionAction

    private void jCheckBox21letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox21letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox21letterSelectionAction

    private void jCheckBox22letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox22letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox22letterSelectionAction

    private void jCheckBox23letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox23letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox23letterSelectionAction

    private void jCheckBox25letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox25letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox25letterSelectionAction

    private void jCheckBox26letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox26letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox26letterSelectionAction

    private void jCheckBox27letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox27letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox27letterSelectionAction

    private void jCheckBox28letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox28letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox28letterSelectionAction

    private void jCheckBox29letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox29letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox29letterSelectionAction

    private void jCheckBox34letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox34letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox34letterSelectionAction

    private void jCheckBox35letterSelectionAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox35letterSelectionAction
        // TODO add your handling code here:
        JCheckBox box = (JCheckBox) evt.getSource();
        if (box.isSelected()) {
            lettersToExport.add(box.getText());
        } else {
            lettersToExport.remove(box.getText());
        }
}//GEN-LAST:event_jCheckBox35letterSelectionAction

    /**
 * Exports contact to Gmail
 * @param evt
 */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            try {
                String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer", lettersToExport, false);
                if (jmeno.length() != 0) {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                } else {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                }
            } catch (MalformedURLException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                ed.setVisible(true);
            } catch (AuthenticationException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                ed.setVisible(true);
            } catch (ServiceException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                ed.setVisible(true);
            } catch (IOException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                ed.setVisible(true);
            } catch (Exception ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                ed.setVisible(true);
            }
        } else {
            if (jTextField2.getText().trim().length() == 0) {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), jTextField2.getText(), lettersToExport, false);
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            } else {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer", lettersToExport, false);
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            }


        }
}//GEN-LAST:event_jButton2ActionPerformed

    /**
 * Exports contact to Gmail
 * @param evt
 */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            try {
                String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer");
                if (jmeno.length() != 0) {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                } else {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                }
            } catch (MalformedURLException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                ed.setVisible(true);
            } catch (AuthenticationException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                ed.setVisible(true);
            } catch (ServiceException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                ed.setVisible(true);
            } catch (IOException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                ed.setVisible(true);
            } catch (Exception ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                ed.setVisible(true);
            }

        } else {
            if (jTextField2.getText().trim().length() == 0) {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), jTextField2.getText());
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            } else {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer");
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
 * Exports contact to Gmail
 * @param evt
 */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (jRadioButton1.isSelected()) {
            try {
                String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer", labelsToExport, true);
                if (jmeno.length() != 0) {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                } else {
                    InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                    id.setVisible(true);
                    this.setVisible(false);
                }
            } catch (MalformedURLException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                ed.setVisible(true);
            } catch (AuthenticationException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                ed.setVisible(true);
            } catch (ServiceException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                ed.setVisible(true);
            } catch (IOException ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                ed.setVisible(true);
            } catch (Exception ex) {
                ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                ed.setVisible(true);
            }
        } else {
            if (jTextField2.getText().trim().length() == 0) {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), jTextField2.getText(), labelsToExport, true);
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            } else {
                try {
                    String jmeno = ItemsManager.exportGmail(idU, jTextField1.getText(), jPasswordField1.getPassword(), "Organizer", labelsToExport, true);
                    if (jmeno.length() != 0) {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has been exported", "Contacts are in group called  " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    } else {
                        InfoDialog id = new InfoDialog(new javax.swing.JFrame(), rootPaneCheckingEnabled, "Contacts has not been exported succesfully", "Error occured during export " + jmeno);
                        id.setVisible(true);
                        this.setVisible(false);
                    }
                } catch (MalformedURLException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "URL address error", ex.getMessage());
                    ed.setVisible(true);
                } catch (AuthenticationException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Authentication error", ex.getMessage());
                    ed.setVisible(true);
                } catch (ServiceException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Service error", ex.getMessage());
                    ed.setVisible(true);
                } catch (IOException ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Connection error", ex.getMessage());
                    ed.setVisible(true);
                } catch (Exception ex) {
                    ErrorDialog ed = new ErrorDialog(new JFrame(), true, "Error", ex.getMessage());
                    ed.setVisible(true);
                }
            }


        }

    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox29;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox34;
    private javax.swing.JCheckBox jCheckBox35;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    private int idU;
    private MainWindow mw;
    private Set<String> lettersToExport = new HashSet<String>();
    private Set<String> labelsToExport = new HashSet<String>();
}
